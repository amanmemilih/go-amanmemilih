// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"database/sql"
	"github.com/zinct/amanmemilih/config"
	"github.com/zinct/amanmemilih/internal/infrastructure/clients/wordie"
	province2 "github.com/zinct/amanmemilih/internal/infrastructure/repositories/district"
	"github.com/zinct/amanmemilih/internal/infrastructure/repositories/province"
	province3 "github.com/zinct/amanmemilih/internal/infrastructure/repositories/subdistrict"
	"github.com/zinct/amanmemilih/internal/infrastructure/repositories/user"
	province4 "github.com/zinct/amanmemilih/internal/infrastructure/repositories/village"
	"github.com/zinct/amanmemilih/internal/interface/delivery/http/v1/controllers"
	"github.com/zinct/amanmemilih/internal/usecases"
	"github.com/zinct/amanmemilih/pkg/jwt"
	"github.com/zinct/amanmemilih/pkg/logger"
)

// Injectors from wire.go:

func InitializeAuthController(db *sql.DB, cfg *config.Config, log *logger.Logger, jwtManager *jwt.JWTManager) *controllers.AuthController {
	userRepository := user.NewUserRepositoryMysql(db)
	wordClient := wordie.NewClient()
	authUsecase := usecases.NewAuthUsecase(userRepository, jwtManager, wordClient)
	authController := controllers.NewAuthController(authUsecase, cfg, log)
	return authController
}

func InitializeProvinceController(db *sql.DB, cfg *config.Config, log *logger.Logger) *controllers.ProvinceController {
	provinceRepository := province.NewProvinceRepositoryMysql(db)
	provinceUsecase := usecases.NewProvinceUsecase(provinceRepository)
	provinceController := controllers.NewProvinceController(provinceUsecase, cfg, log)
	return provinceController
}

func InitializeDistrictController(db *sql.DB, cfg *config.Config, log *logger.Logger) *controllers.DistrictController {
	districtRepository := province2.NewDistrictRepositoryMysql(db)
	districtUsecase := usecases.NewDistrictUsecase(districtRepository)
	districtController := controllers.NewDistrictController(districtUsecase, cfg, log)
	return districtController
}

func InitializeSubdistrictController(db *sql.DB, cfg *config.Config, log *logger.Logger) *controllers.SubdistrictController {
	subdistrictRepository := province3.NewSubdistrictRepositoryMysql(db)
	subdistrictUsecase := usecases.NewSubdistrictUsecase(subdistrictRepository)
	subdistrictController := controllers.NewSubdistrictController(subdistrictUsecase, cfg, log)
	return subdistrictController
}

func InitializeVillageController(db *sql.DB, cfg *config.Config, log *logger.Logger) *controllers.VillageController {
	villageRepository := province4.NewVillageRepositoryMysql(db)
	villageUsecase := usecases.NewVillageUsecase(villageRepository)
	villageController := controllers.NewVillageController(villageUsecase, cfg, log)
	return villageController
}
